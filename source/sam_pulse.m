function [outdata, tbase, out_rate, err, sfile] = sam_pulse(varargin)
% sam_pulse: Method to generate pulse train waveforms with sinusoidal
% amplitude modulation.
% Usage
%     CAN BE called directly by the user

% PULSEGEN - create pulse train waveform
%
%    PULSEGEN produces a pulse train waveform pulse_out
%    specified by the parameters in the structure sfile.
%
%    The stimulus structure is generated by new.m.
%		The following parameters are required:
%   sfile.Npulses= number of pulses in the train
%   sfile.Delay= delay to first pulse
%   sfile.IPI= interpulse interval (one number)
%   sfile.Duration = duration list for pulses (compound pulses allowed at each interval)
%   sfile.Level= level list for pulses (compound levels corresponding to durations)
%   sfile.LevelFlag= 'absolute' or 'relative': levels after first are either absolute or relative
%   sfile.Scale= scale factor applied to output
%	 sfile.Offset = offset added to output (after scaling)
%   sfile.Sequence= sequence (operates as in steps - multiple seqeuences allowed)
%   sfile.SeqParList= parameters to sequence (apply according to entries in sequence)
%   sfile.SeqStepList= which step to be operated on by the sequence element if level or duration
%
%
% original by S.C. Molitor, 8/2000
% modified Paul B. Manis, Ph.D.
% pmanis@med.unc.edu
% 9/1/2000   uses new record_parse and step generator
%
% Revised 4/10/2008 to use new methods.
% - call with no arguments tests the algorithm.
% - uses state matrix to drive sequencing.

% initialize output
outdata = {};
err = 0;
tbase = {};
out_rate = [];

if(nargin == 0) % test mode...
    sfile = new('pulse');
    sfile.Npulses.v = 2000;
    sfile.Sequence.v = '100';
    sfile.Level.v = 100;
    sfile.SeqParList.v = 'Level';
    sfile.Duration.v = 0.1;
    sam.freq = 100; % Hz
    sam.mod = 80; % depth
    sam.rf = 10.0; % rise-fall time to minimize onset transient locking (msec);
    sam.fc = 2000;
    sfile.IPI.v = 1000/sam.fc;
    make_samfigure();
    return;
    
    
else
    if ischar(varargin{1})
        % first read the sam parameters from the screen. 
        h = findobj('tag', 'sam_dur');
        dur = str2double(get(h, 'string'));
        h = findobj('tag', 'sam_rf');
        rf = str2double(get(h, 'string'));
        h = findobj('tag', 'sam_level');
        level = str2double(get(h, 'string'));
        h = findobj('tag', 'sam_pw');
        pw = str2double(get(h, 'string'));
        h = findobj('tag', 'sam_fc');
        fc = str2double(get(h, 'string'));
        h = findobj('tag', 'sam_fmod');
        fm = str2double(get(h, 'string'));
        h = findobj('tag', 'sam_depth');
        depth = str2double(get(h, 'string'));
        
        sfile = new('pulse');
        
        sfile.Npulses.v = floor(fc/(dur/1000));
        sfile.Npulses.v
        
        sfile.Sequence.v = '100';
        sfile.Level.v = level;
        sfile.SeqParList.v = 'Level';
        sfile.Duration.v = pw;
        sam.freq = fm; % Hz
        sam.mod = depth; % depth
        sam.rf = rf; % rise-fall time to minimize onset transient locking (msec);
        sam.fc = fc;
        sfile.IPI.v = 1000/sam.fc;
        
        [outdata, tbase, out_rate, err, sfile] = pulse(sfile);
        hsam = findobj('tag', 'sam_plot'); %#ok<NASGU>
        for i = 1:length(outdata)
            tb = [tbase{i}.v];
            rf = rfshape(sfile.Delay.v, sfile.Npulses.v*sfile.IPI.v, out_rate, sam.rf);
            sw = (1- sam.mod/100) + (sam.mod/100)*(0.5*sin(2*pi*(sam.freq/1000.0)*(tb-sfile.Delay.v))+0.5);
            sw(1:length(rf)) = sw(1:length(rf)).*rf';
            outdata{i}.v = sw' .* outdata{i}.v';
        end;
        tb = [tbase{1}.vsco];
        rf = rfshape(sfile.Delay.v, sfile.Npulses.v*sfile.IPI.v, out_rate, sam.rf);
        sw = (1- sam.mod/100) + (sam.mod/100)*(0.5*sin(2*pi*(sam.freq/1000.0)*(tb-sfile.Delay.v))+0.5);
        sw(1:length(rf)) = sw(1:length(rf)).*rf';
        outdata{1}.vsco = sw' .* outdata{1}.vsco';
        ha = findobj('tag', 'sam_plot');
        axes(ha);
        stairs([tbase{:}.v], [outdata{:}.v]');
        hold on;
        stairs(tbase{1}.vsco, outdata{1}.vsco', 'r');
        plot(tb(1:length(rf)), rf*sfile.Level.v, 'k--');
        set(ha, 'tag', 'sam_plot');
    else
        
        sfile = varargin{1};
        if(isempty(sfile))
            QueMessage('sm_pulse: No STIM?', 1);
            return;
        end;
        if(~strcmp(sfile.Method.v, 'pulse'))
            QueMessage(sprintf('sam_pulse: loaded sfile is of type %s, not ours!', sfile.Method.v), 1);
            return;
        end;

    end;
    
end;






%rf shape function taken from python PySounds code, modified for matlab.
function fil = rfshape(delay, duration, samplefreq, rf)

% convert values all to seconds
delay = delay/1000.;
duration = duration/1000.;
rf = rf/1000.;

jd = floor(delay*samplefreq); % beginning of signal buildup (delay time)
if jd < 1
    jd = 1;
end;
je = floor((delay+duration)*samplefreq)+1; % end of signal decay (duration + delay)
%
% build sin^2 filter from 0 to 90deg for shaping the waveform
%
nf = floor(rf*samplefreq); % number of points in the filter
fo = 1.0/(4.0*rf); % filter "frequency" in Hz - the 4 is because we use only 90deg for the rf component

pts = 0:nf;
fil = zeros(je, 1);
fil(jd:jd+nf) = sin(2*pi*fo*pts/samplefreq).^2; % filter
fil((jd+nf):(je-nf)) = 1;
pts = ((je-nf):je);
kpts = (jd+nf:-1:jd);
fil(pts) = fil(kpts);


function make_samfigure()

h = findobj('Tag', 'sam_figure');
if isempty(h)
    h = figure;
    set(h, 'Tag', 'sam_figure');
end;
figure(h)
% set(h, 'Menubar', 'none');
set(h, 'Name', 'SAM control');
clf;

hp = uipanel('Title' ,'SAM Parameters', 'Position', [0.0, 0.65, 1.0, .35], ...
    'BackgroundColor', 'white');

uicontrol('Parent', hp, 'Style', 'text', 'String','Duration (ms)', ...
    'Position', [5, 100, 100, 20], 'backgroundcolor', 'white', 'HorizontalAlignment', 'left');
uicontrol('Parent', hp, 'Style', 'edit', 'String', '1000',...
    'Position', [105, 100, 100, 20], 'tag', 'sam_dur',  'backgroundcolor', 'white');

uicontrol('Parent', hp, 'Style', 'text', 'String','RF (ms)', ...
    'position', [5, 80, 100, 20], 'backgroundcolor', 'white', 'HorizontalAlignment', 'left');
uicontrol('Parent', hp, 'Style', 'edit', 'String', '10.0',...
    'Position', [105, 80, 100, 20], 'tag', 'sam_rf', 'backgroundcolor', 'white');

uicontrol('Parent', hp, 'Style', 'text', 'String','Level (ms)', ...
    'position', [5, 60, 100, 20], 'backgroundcolor', 'white', 'HorizontalAlignment', 'left');
uicontrol('Parent', hp, 'Style', 'edit', 'String', '100',...
    'Position', [105, 60, 100, 20], 'tag', 'sam_level', 'backgroundcolor', 'white');

uicontrol('Parent', hp, 'Style', 'text', 'String','Pulse WIdth (ms)', ...
    'position', [5, 40, 100, 20], 'backgroundcolor', 'white', 'HorizontalAlignment', 'left');
uicontrol('Parent', hp, 'Style', 'edit', 'String', '0.1',...
    'Position', [105, 40, 100, 20], 'tag', 'sam_pw', 'backgroundcolor', 'white');
%-----
uicontrol('Parent', hp, 'Style', 'text', 'String','Carrier(Hz)', ...
    'position', [250, 100, 100, 20], 'backgroundcolor', 'white', 'HorizontalAlignment', 'left');
uicontrol('Parent', hp, 'Style', 'edit', 'String', '2000.',...
    'Position', [355, 100, 100, 20], 'tag', 'sam_fc', 'backgroundcolor', 'white');

uicontrol('Parent', hp, 'Style', 'text', 'String','FMod (Hz)', ...
    'position', [250, 80, 100, 20], 'backgroundcolor', 'white', 'HorizontalAlignment', 'left');
uicontrol('Parent', hp, 'Style', 'edit', 'String', '100',...
    'Position', [355, 80, 100, 20], 'tag', 'sam_fmod', 'backgroundcolor', 'white');

uicontrol('Parent', hp, 'Style', 'text', 'String','Depth (%)', ...
    'position', [250, 60, 100, 20], 'backgroundcolor', 'white', 'HorizontalAlignment', 'left');
uicontrol('Parent', hp, 'Style', 'edit', 'String', '100.0',...
    'Position', [355, 60, 100, 20], 'tag', 'sam_depth', 'backgroundcolor', 'white');

uicontrol('Parent', hp', 'Style', 'pushbutton', 'String', 'Update', ...
    'position', [355 , 40, 100, 20], 'backgroundcolor', 'white', ...
    'HorizontalAlignment', 'left', 'callback', 'sam_pulse(''update'')');


ha = axes('Position', [0.1 0.1 0.8 0.5]);
set(ha, 'tag', 'sam_plot');


